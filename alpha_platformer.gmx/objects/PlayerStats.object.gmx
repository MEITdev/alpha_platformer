<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialise the PlayerStats

// set the GUI size
display_set_gui_size(view_wview[0], view_hview[0]);

// how many seconds does the player have to finish the game
game_time_limit = 200;
remaining_time = game_time_limit;

score = 0;
highscore = 0;
player_hp = 3;
player_maxhp = 5;
player_time = 0;
player_blue_gems = 0;

// Keys required to unlock the Boss level
player_has_green_key = false;
player_has_red_key = false;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// To start the game
var start = keyboard_check_pressed(vk_space);

if (gamepad_is_connected(0))
{
    start = gamepad_button_check_pressed(0, gp_start);
}

if (start == true) &amp;&amp; room == rm_menu
{
    room_goto(rm_one);   
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start the game again
if room == rm_highscore
{
    game_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Play the background music

// Create an audio emitter
audio_em = audio_emitter_create();
audio_emitter_gain(audio_em, 0.1);
audio_play_sound_on(audio_em, snd_theme_song, true, 10);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw GUI elements
switch(room)
{
    case rm_menu:
        // Draw the text
        draw_set_font(fnt_title);
        draw_set_halign(fa_center);
        draw_set_valign(fa_center);
        draw_text_colour(room_width/2 + 4, 128 + 4, "Alpha#Platformer", c_black, c_black, c_black, c_black, .5);
        draw_text_colour(room_width/2, 128, "Alpha#Platformer", c_white, c_white, c_white, c_white, 1);
        
        var str;
        if (gamepad_is_connected(0))
        {
            str = "Press [START] to play!";
            cstr = "[B] to activate / [A] to jump / [ESC] to quit"
        }
        else
        {
            str = "Press [SPACE] to play!";
            cstr = "[SPACE] to activate / [UP] to jump / [ESC] to quit"
        }
        
        draw_set_font(fnt_start);
        draw_text_colour(room_width/2 + 4, room_height /2 + 4, str, c_black, c_black, c_black, c_black, .5);
        draw_text_colour(room_width/2, room_height/2, str, c_white, c_white, c_white, c_white, 1);
        
        
        
        draw_set_font(fnt_gui);
        draw_text_colour(room_width/2 + 4, room_height -28, cstr, c_black, c_black, c_black, c_black, .5);
        draw_text_colour(room_width/2, room_height - 32, cstr, c_white, c_white, c_white, c_white, 1);
        
        
        break;
               
    case rm_highscore:
        draw_set_halign(fa_center);
        draw_set_valign(fa_center);
        draw_set_font(fnt_start);
        
        draw_text_colour(room_width/2 + 4, 64 + 4, "Your Score: " + string(score), c_black, c_black, c_black, c_black, 0.5);
        draw_text_colour(room_width/2, 64, "Your Score: " + string(score), c_white, c_white, c_white, c_white, 1);
        
        draw_text_colour(room_width/2 + 4, room_height/2 + 4, "Best Score: " + string(PlayerStats.highscore), c_black, c_black, c_black, c_black, 0.5);
        draw_text_colour(room_width/2, room_height/2, "Best Score: " + string(PlayerStats.highscore), c_white, c_white, c_white, c_white, 1);
        
        draw_text_colour(room_width/2 + 4, room_height-28, "[ESC] to quit / [R] to try again" + string(PlayerStats.highscore), c_black, c_black, c_black, c_black, 0.5);
        draw_text_colour(room_width/2, room_height-32, "[ESC] to quit / [R] to try again" + string(PlayerStats.highscore), c_white, c_white, c_white, c_white, 1);
        
        
        
        break;
         
    default:
        // Draw health gem outline
        for (i = 0; i &lt; player_maxhp; i += 1)
        {
            draw_sprite_ext(spr_hp_outline, 0, 64 + (i * 32), 64, 1, 1, 0, c_white, 1);
        };
        
        // Draw the health gems
        for (i = 0; i &lt; player_hp; i += 1)
        {
            draw_sprite_ext(spr_hp, 0, 64 + (i * 32), 64, 1, 1, 0, c_white, 1);
        };
        
        // Draw the number of collected Gems
        draw_sprite_ext(spr_gems, 0, 64, 96, 1, 1, 0, c_white, 1);
        draw_sprite_ext(spr_gems_outline, 0, 64, 96, 1, 1, 0, c_white, 1);

        draw_set_halign(fa_center);
        draw_set_valign(fa_center);
        
        draw_set_font(fnt_gui);
        draw_text_colour(112 + 2, 96 + 2, string(player_blue_gems), c_black, c_black, c_black, c_black, 0.5);        
        draw_text_colour(112, 96, string(player_blue_gems), c_white, c_white, c_white, c_white, 1);
        
        // Draw the key outlines
        draw_sprite_ext(spr_key_outline, 0, 64, 156, 1, 1, 0, c_white, 1);
        
        // Draw Green key
        draw_sprite_ext(spr_green_key, 0, 64, 156, 1, 1, 0, c_white, player_has_green_key);
        
        player_time += 1; // Increase the time counter
        
        // Draw the time elapsed
        draw_set_font(fnt_gui);
        draw_set_halign(fa_center);
        draw_set_valign(fa_center);
        // calculate the remaining time
        remaining_time = floor(game_time_limit - floor(player_time/room_speed));
        
        
        
        draw_text_colour(room_width/2+2, 32 + 2, string(remaining_time), c_black, c_black, c_black, c_black, 0.5);        
        draw_text_colour(room_width/2, 32, string(remaining_time), c_white, c_white, c_white, c_white, 1);
        
        // manage the end game scenario
        if remaining_time &lt;= 0
        {
            // calculate the players high score
            score = PlayerStats.remaining_time + PlayerStats.player_blue_gems * 3;
            
            // read the current high score
            ini_open("highscore.ini");
            PlayerStats.highscore = ini_read_real("Score", "highscore", 0);
            
            // store new high score
            if score &gt; PlayerStats.highscore
            {
                PlayerStats.highscore = score;
                ini_write_real("Score", "highscore", PlayerStats.highscore);
            }
            
            // Close the ini file
            ini_close();
            
            room_goto(rm_highscore);     
        }
        
        break;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End the game
game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
